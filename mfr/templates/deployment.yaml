apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mfr.fullname" . }}
  labels:
    app: {{ template "mfr.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ template "mfr.name" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.strategy }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "mfr.name" . }}
        component: {{ template "mfr.name" . }}
        release: {{ .Release.Name }}
      annotations:
        {{- include "mfr.deploymentAnnotations" . | nindent 8 }}
    spec:
      affinity:
        {{- if .Values.additionalAffinities }}
        {{- toYaml .Values.additionalAffinities | nindent 8 }}
        {{- end }}
        {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ template "mfr.name" . }}
                  component: {{ template "mfr.name" . }}
                  release: {{ .Release.Name }}
        {{- else if eq .Values.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: {{ template "mfr.name" . }}
                    component: {{ template "mfr.name" . }}
                    release: {{ .Release.Name }}
        {{- end }}
      containers:
        - name: nginx
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          command:
            - nginx
            - -c
            - /etc/nginx/nginx.conf
            - -g
            - daemon off;
          ports:
            - name: http-internal
              containerPort: {{ .Values.service.internalPort }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 10
          volumeMounts:
            - name: config
              subPath: nginx.conf
              mountPath: /etc/nginx/nginx.conf
              readOnly: true
            - name: config
              subPath: robots.txt
              mountPath: /usr/share/nginx/html/robots.txt
              readOnly: true
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
        - name: tornado
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - gosu
            - www-data
            - invoke
            - server
          env:
            {{- include "mfr.environment" . | nindent 12 }}
            - name: ENV
              value: kube
          ports:
            - name: http-external
              containerPort: {{ .Values.service.externalPort }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .Values.service.externalPort }}
          volumeMounts:
            - name: secret
              subPath: settings.json
              mountPath: /home/.cos/mfr-kube.json
              readOnly: true
            - name: localcache
              mountPath: /tmp/mfrlocalcache
          resources:
            {{- toYaml .Values.tornado.resources | nindent 12 }}
        - name: unoserver
          image: "{{ .Values.unoserver.image.repository }}:{{ .Values.unoserver.image.tag }}"
          imagePullPolicy: {{ .Values.unoserver.image.pullPolicy }}
          command:
            - /usr/bin/python3.12
            - /usr/bin/unoserver
            - --interface 
            - '0.0.0.0'
            - --port
            - '2003'
            - --uno-interface
            - '127.0.0.1'
            - --uno-port
            - '2002'
            - --verbose
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |-
                  cd /tmp
                  touch test.txt
                  timeout 10 /usr/bin/python3.12 /usr/bin/unoconvert --convert-to html test.txt -
                  exit $?
            initialDelaySeconds: 30
            periodSeconds: 10
          ports:
            - name: unoserver
              containerPort: 2003
          volumeMounts:
            - name: localcache
              mountPath: /tmp/mfrlocalcache
          resources:
            {{- toYaml .Values.unoserver.resources | nindent 12 }}
      volumes:
        - name: localcache
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "mfr.fullname" . }}
        - name: secret
          secret:
            secretName: {{ template "mfr.fullname" . }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
