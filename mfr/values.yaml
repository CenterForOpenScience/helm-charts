# Default values for mfr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

nginx:
  image:
    repository: nginx
    tag: '1'
    pullPolicy: Always
  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

tornado:
  image:
    repository: quay.io/centerforopenscience/mfr
    tag: develop
    pullPolicy: Always
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

unoconv:
  image:
    repository: centerforopenscience/unoconv  # TODO: update to quay.io
    tag: latest
    pullPolicy: Always
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

service:
  name: mfr
  type: ClusterIP
  externalPort: 7778
  internalPort: 80

ingress:
  enabled: true
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    - staging-mfr.osf.io
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: osf-io-tls
    #   hosts:
    #     - staging-mfr.osf.io


settingsFile:
  SERVER_CONFIG:
    ADDRESS: "0.0.0.0"
    PORT: 7778
    DEBUG: false
    XHEADERS: true
    CORS_ALLOW_ORIGIN: "https://staging.osf.io"
    MAX_BUFFER_SIZE: 157286400
    PROVIDER_NAME: "osf"
    ALLOWED_PROVIDER_DOMAINS: "https://staging.osf.io/ https://staging-files.osf.io/"
    CACHE_ENABLED: true
    CACHE_PROVIDER_NAME: "cloudfiles"
    CACHE_PROVIDER_SETTINGS:
      container: "mfr_staging"
    CACHE_PROVIDER_CREDENTIALS:
      region: ''
      username: ''
      token: ''
      temp_key: ''
    ANALYTICS:
      KEEN:
        PRIVATE:
          PROJECT_ID: ''
          WRITE_KEY: ''
        PUBLIC:
          PROJECT_ID: ''
          WRITE_KEY: ''
  UNOCONV_EXTENSION_CONFIG:
    SERVER: "127.0.0.1"
  SENTRY_DSN: ''
  LOGGING:
    version: 1
    disable_existing_loggers: false
    formatters:
      defaultFormatter:
        '()': "waterbutler.core.logging.MaskFormatter"
        format: "[%(asctime)s][%(levelname)s][%(name)s]: %(message)s"
        pattern: "(?<=cookie=)(.*?)(?=&|$)"
        mask: "***"
    handlers:
      consoleHandler:
        class: "logging.StreamHandler"
        level: "INFO"
        formatter: "defaultFormatter"
    loggers:
      '':
        handlers:
          - "consoleHandler"
        level: "INFO"
        propagate: false
    root:
      level: "INFO"
      handlers:
        - "consoleHandler"

