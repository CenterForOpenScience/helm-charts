# Default values for cas.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

antiAffinity: soft

# strategy:
#   rollingUpdate:
#     maxSurge: 25%
#     maxUnavailable: 25%
#   type: RollingUpdate

budget:
  minAvailable: 0

apache:
  image:
    repository: quay.io/centerforopenscience/shibboleth-sp
    tag: latest
    pullPolicy: Always
  resources: {}
    #limits:
    #  cpu: 1
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi
  configEnvs: {}
  configFiles: {}
  secretEnvs: {}
  secretFiles: {}
    # shibboleth/incommon-idp-signature.pem: |-
      
    # shibboleth/sp-cert.pem: |-
      
    # shibboleth/sp-key.pem: |-
      
    # shibboelth/shibboleth2.xml: |-
      

jetty:
  image:
    repository: quay.io/centerforopenscience/cas
    tag: develop
    pullPolicy: Always
  resources: {}
    #limits:
    #  cpu: 1
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi
  configEnvs:
    JAVA_OPTIONS: -Xms512m -Xmx512m
  configFiles: {}
  secretEnvs:
    OAUTH_ORCID_CLIENT_ID: ''
    OAUTH_ORCID_CLIENT_SECRET: ''
    OSF_DB_URL: 'jdbc:postgresql://osf-postgresql.namespace/osf?targetServerType=master'
    OSF_DB_USER: ''
    OSF_DB_PASSWORD: ''
    OSF_JWE_SECRET: ''
    OSF_JWT_SECRET: ''
    TGC_ENCRYPTION_KEY: ''
    TGC_SIGNING_KEY: ''
    ## If postgresql.enabled is false
    # DATABASE_URL: ''
    # DATABASE_USER: ''
    # DATABASE_PASSWORD: ''
  secretFiles: {}

horizontalPodAutoscaler:
  enabled: false
  maxReplicas: 3
  targetCPUUtilizationPercentage: 90

service:
  name: cas
  type: ClusterIP
  sessionAffinity: None
  externalPort: 8080
  internalPort: 80

ingress:
  enabled: false
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    - chart-example.local
  paths:
    - /
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
casDomain: 'staging-accounts.osf.io'
osfDomain: 'staging.osf.io'
apiDomain: 'staging-api.osf.io'
preprintProviderDomains:
  override: true
  prefix: staging-
  suffix: .cos.io

certificate:
  enabled: false
  name: cert
  # WORKAROUND: Ingress deploy blocked to GLBC due to race condition w/ missing TLS certificate
  # - Issue: https://github.com/jetstack/cert-manager/issues/606
  # - PR: https://github.com/kubernetes/ingress-gce/pull/388
  tls: true
  # issuerRef:
  #   name: letsencrypt-prod
  #   kind: ClusterIssuer
  # commonName: example.org
  # dnsNames:
  #   - example.org
  #   - subdomain.example.org
  # acmeConfig:
  #   http01: {}
  #     # ingress: ''
  #   domains:
  #     - example.org
  #     - subdomain.example.org

networkPolicy:
  enabled: false
  # Allows external access to the pod, otherwise access is restricted to
  # clients with the explicit label.
  allowExternal: true
  egress: {}
    # - to:
    #   - namespaceSelector: {}
    #   ports:
    #     - port: 53  # dns
    #       protocol: TCP
    #     - port: 53  # dns
    #       protocol: UDP
    # - to:
    #   - ipBlock:
    #       cidr: 0.0.0.0/0
    #       except:
    #         - 10.0.0.0/8
    #         - 172.16.0.0/12
    #         - 192.168.0.0/16
    #   ports:
    #     - port: 80  # http
    #       protocol: TCP
    #     - port: 443  # https
    #       protocol: TCP

### https://sentry.cos.io/sentry/{project}/settings/keys/
sentryDSN: ''

# Database connection TLS
tls:
  enabled: false
  files:
    # Root Certificate
    root.crt: |-
      
    # CAS database certificate
    postgresql.crt: |-
      
    # OSF database certificate
    osf.crt: |-
      
  # Files already base64 encoded
  base64Files:
    # CAS database key (PK8 DER Format, must be named postgresql.pk8 unless otherwise specified)
    postgresql.pk8: ''
    # OSF database key (PK8 DER Format)
    osf.pk8: ''

maintenance:
  enabled: false

postgresql:
  enabled: false
  ## image:
  ##   repository: postgres image repository
  ##   tag: postgres image version
  ##   pullPolicy: Always
  ## ref: https://hub.docker.com/r/library/postgres/tags/
  #
  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images

  ## Create a database user
  ## Default: postgres
  postgresUser: postgres
  # Default: random 10 character string
  # postgresPassword:

  ## Create a database
  ## Default: the postgres user
  postgresDatabase: cas

  # Specify initdb arguments, e.g. --data-checksums
  # ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
  # ref: https://www.postgresql.org/docs/current/static/app-initdb.html
  postgresInitdbArgs: --data-checksums

  ## Persist data to a persitent volume
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:
    accessMode: ReadWriteOnce
    size: 25Gi
    subPath: "postgresql-db"

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
