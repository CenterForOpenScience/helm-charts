# Default values for lookit.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

nginx:
  image:
    repository: gcr.io/cos-containers/nginx
    tag: '1'
    pullPolicy: Always
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious 
    # choice for the user. This also increases chances charts run on environments with little 
    # resources, such as Minikube. If you do want to specify resources, uncomment the following 
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi

uwsgi:
  image:
    repository: gcr.io/cos-containers/lookit-api
    tag: master
    pullPolicy: Always
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious 
    # choice for the user. This also increases chances charts run on environments with little 
    # resources, such as Minikube. If you do want to specify resources, uncomment the following 
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi

service:
  name: nginx
  type: ClusterIP
  externalPort: 5000
  internalPort: 80

ingress:
  enabled: false
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    - chart-example.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

postgresql:
  ## postgres image repository
  image: "postgres"
  ## postgres image version
  ## ref: https://hub.docker.com/r/library/postgres/tags/
  ##
  imageTag: "9.6"

  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  ## Create a database user
  ## Default: postgres
  postgresUser: postgres
  # Default: random 10 character string
  # postgresPassword:

  ## Create a database
  ## Default: the postgres user
  postgresDatabase: lookit

  # Specify initdb arguments, e.g. --data-checksums
  # ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
  # ref: https://www.postgresql.org/docs/current/static/app-initdb.html
  postgresInitdbArgs: --data-checksums

  ## Persist data to a persitent volume
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass: ssd
    accessMode: ReadWriteOnce
    size: 25Gi
    subPath: "postgresql-db"

  metrics:
    enabled: false
    image: wrouesnel/postgres_exporter
    imageTag: v0.1.1
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: 256Mi
        cpu: 100m

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m

configs:
  nginx.conf: |-
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $upstream_cache_status $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        gzip on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";
        gzip_comp_level 2;
        gzip_min_length 512;
        gzip_proxied any;
        gzip_vary on;
        gzip_types text/plain text/css application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss;
        ##
        # Caching Settings
        ##
        # # Pull cache-busting key out of query string
        # map $args $args_first {
        #     default $args;
        #     ~^(?<first>.*?)&?_=\d+ $first;
        # }
        # map $args $args_rest {
        #     default "";
        #     ~^\?_=\d+&?(?<rest>.*)$ $rest;
        #     ~_=\d+(?<rest>.*)$ $rest;
        # }
        # uwsgi_cache_path /cache/uwsgi keys_zone=osf_uwsgi_cache:10m inactive=120m;
        # uwsgi_temp_path /cache/uwsgi-temp;
        #
        # proxy_cache_path /cache/proxy keys_zone=osf_proxy_cache:10m inactive=120m;
        # proxy_temp_path /cache/proxy-temp;
        server {
            listen 80;
            keepalive_timeout 15;
            root /static/code;
            client_max_body_size 25M;
            server_name _;
            if ($http_x_forwarded_proto = "http") {
                return 301 https://$host$request_uri;
            }
            location = /healthz {
                access_log off;
                return 200;
            }
            location /robots.txt {
                alias /nginx/robots.txt;
            }
            location / {
                # the google health check is a bit overwhelming
                # if ($http_user_agent ~* "googlehc") {
                #     access_log off;
                #     return 200 '';
                # }
                # Disable caching of application requests
                add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
                add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
                add_header Pragma "no-cache";
                # Pass requests to uwsgi application
                include /etc/nginx/uwsgi_params;
                uwsgi_buffering off;
                uwsgi_request_buffering off;
                uwsgi_pass uwsgi://127.0.0.1:5000;
            }
        }
    }
  robots.txt: |-
    User-agent: *
    Disallow: /
  uwsgi.ini: |-
    [uwsgi]
    uid = www-data
    gid = www-data
    # add user-agent, http://uwsgi.unbit.narkive.com/jEtphIzE/default-log-format-explained#post5
    log-format = [pid: %(pid)|app: ?|req: ?/?] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core)) "%(uagent)"
    
    ## Django-related settings
    # chdir = /code
    module = project.wsgi:application
    env = DJANGO_SETTINGS_MODULE=project.settings 
    
    # process-related settings
    master = true
    workers = 1
    threads = 1
    harakiri = 120
    buffer-size = 8192
    socket = :5000
    stats = :1717
    vacuum = true
    need-app = true
    show-config = true
    
    # greenlet settings
    gevent=2000
    gevent-monkey-patch=true
    
    master
  local.py: |-
    from . import defaults

    ALLOWED_HOSTS = ('*', )