apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "angular.fullname" . }}
  labels:
    app: {{ template "angular.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
{{- define "angular.inlineconfigs" }}
nginx.conf: |-
  user nginx;
  worker_processes 1;

  load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;
  {{- if .Values.nginx.vts.enabled }}
  load_module /usr/lib/nginx/modules/ngx_http_geoip_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_vhost_traffic_status_module.so;
  {{- end }}
  {{- range .Values.nginx.modules }}
  load_module {{ . }};
  {{- end }}

  error_log /var/log/nginx/error.log warn;
  pid /var/run/nginx.pid;

  events {
      worker_connections 1024;
  }

  http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format main '$remote_addr - $upstream_cache_status $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                      ' Proxy: "$proxy_host" "$upstream_addr"'
                      ' URI: "$uri"'
                      ' Prerender: "$prerender"';
      access_log /var/log/nginx/access.log main;

      real_ip_header {{ .Values.nginx.realIpHeader }};
      real_ip_recursive {{ .Values.nginx.realIpRecursive }};
      {{- range .Values.nginx.proxySourceRanges }}
      set_real_ip_from {{ . }};
      {{- end }}

      {{- if .Values.nginx.vts.enabled }}
      geoip_country       /etc/nginx/GeoIP.dat;
      geoip_city          /etc/nginx/GeoLiteCity.dat;
      geoip_proxy_recursive on;
      {{- range .Values.nginx.proxySourceRanges }}
      geoip_proxy {{ . }};
      {{- end }}

      vhost_traffic_status_zone shared:vhost_traffic_status:{{ .Values.nginx.vts.statusZoneSize }};
      vhost_traffic_status_filter_by_set_key {{ .Values.nginx.vts.defaultFilterKey }};
      {{- end }}

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 620s;
      types_hash_max_size 2048;
      server_tokens off;

      gzip on;
      gzip_disable "MSIE [1-6]\.(?!.*SV1)";
      gzip_comp_level 2;
      gzip_min_length 512;
      gzip_proxied any;
      gzip_vary on;
      gzip_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      brotli on;
      brotli_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      {{- if .Values.nginx.vts.enabled }}
      server {
          listen {{ .Values.nginx.vts.internalPort }};
          server_name _;

          location /healthz {
              access_log off;
              return 200;
          }

          location /nginx_status {
              vhost_traffic_status_display;
              vhost_traffic_status_display_format html;
          }
      }
      {{- end }}


      {{- if .Values.nginx.brandedSubdomains }}
      server {
          listen {{ .Values.service.internalPort }};
          server_name "~^(?<sub>({{ join "|" .Values.nginx.brandedSubdomains }}))\.{{ .Values.nginx.primaryDomain | replace "." "\\." }}$";
          {{- if .Values.prerender.enabled }}
          set $prerender 0;

          if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|googlebot|google-inspectiontool|archive.org_bot|pingbot") {
              set $prerender 1;
          }

          # Google translate
          if ($http_referer ~* "translate\.googleusercontent\.com") {
              set $prerender 1;
          }

          if ($args ~* "_escaped_fragment_") {
              set $prerender 1;
          }

          if ($http_user_agent ~* "prerender") {
              set $prerender 0;
          }

          if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
              set $prerender 0;
          }

          # Exclude download links from prerender
          if ($arg_action ~* "download") {
              set $prerender 0;
          }

          if ($uri ~* ^/\w+/download(/?$|/.*)) {
              set $prerender 0;
          }

          if ($uri ~* ^/preprints/(\w+/download|\w+/\w+/download)(/?$|/.*)) {
              set $prerender 0;
          }
          {{- end }}


          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /favicon.ico {
              # TODO: determine real favicon location
              alias /static/assets/images/favicon.ico;
          }

          location = /robots.txt {
              alias /static/robots.txt;
          }

          location / {
              {{- if .Values.prerender.enabled }}
              if ($prerender = 1) {
                  rewrite .* /https://$host$request_uri? break;
                  proxy_pass http://{{ .Values.prerender.service.name }}:{{ .Values.prerender.service.externalPort }};
              }
              {{- end }}

              # TODO: Ensure Angular can route based off of custom domains
              try_files $uri $uri/ /index.html;
          }

      }
      {{- end }}

      {{- if .Values.nginx.preprintDomainMap }}
      {{- range $key, $val := .Values.nginx.preprintDomainMap }}
      server {
          listen {{ $.Values.service.internalPort }};
          server_name {{ $key }};
          # TODO: Ensure Angular can route based off of custom domains
          try_files $uri $uri/ /index.html;
      }
      {{- end }}
      {{- end }}

      {{- if .Values.nginx.institutionDomainMap }}
      {{- range $key, $val := .Values.nginx.institutionDomainMap }}
      server {
          listen {{ $.Values.service.internalPort }};
          server_name {{ $key }};
          # TODO: Ensure Angular can route based off of custom domains
          try_files $uri $uri/ /index.html;
      }
      {{- end }}
      {{- end }}

      server {
          listen {{ .Values.service.internalPort }} default_server;
          server_name _;

          client_max_body_size 25M;
          keepalive_timeout 620s;

          root /static;
          index index.html;
          {{- if .Values.prerender.enabled }}
          set $prerender 0;

          if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|googlebot|google-inspectiontool|archive.org_bot|pingbot") {
              set $prerender 1;
          }

          # Google translate
          if ($http_referer ~* "translate\.googleusercontent\.com") {
              set $prerender 1;
          }

          if ($args ~* "_escaped_fragment_") {
              set $prerender 1;
          }

          if ($http_user_agent ~* "prerender") {
              set $prerender 0;
          }

          if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
              set $prerender 0;
          }

          # Exclude download links from prerender
          if ($arg_action ~* "download") {
              set $prerender 0;
          }

          if ($uri ~* ^/\w+/download(/?$|/.*)) {
              set $prerender 0;
          }

          if ($uri ~* ^/preprints/(\w+/download|\w+/\w+/download)(/?$|/.*)) {
              set $prerender 0;
          }
          {{- end }}

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /healthz {
              access_log off;
              return 200;
          }

          location = /robots.txt {
              alias /static/robots.txt;
          }

          location = /favicon.ico {
              # TODO: determine real favicon location
              alias /static/assets/images/favicon.ico;
          }


          {{- if (index .Values.nginx "additionalConfig") }}
          {{- .Values.nginx.additionalConfig | nindent 10 }}
          {{- end }}

          include /etc/nginx/conf.d/*.conf;

          location ~* ^/share(/?$|/.*) {
              return 301 {{ .Values.share.url }};
          }

          location / {
              {{- if .Values.prerender.enabled }}
              if ($prerender = 1) {
                  rewrite .* /https://$host$request_uri? break;
                  proxy_pass http://{{ .Values.prerender.service.name }}:{{ .Values.prerender.service.externalPort }};
              }
              {{- end }}

              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "-1";
              add_header Pragma "no-cache";

              # URL rewrites
              rewrite "^/project/.*?/node/(.*)" https://$host/$1 permanent;
              rewrite "^/project/([a-zA-Z0-9]{5,}.*)" https://$host/$1 permanent;
              rewrite "^/profile/([a-zA-Z0-9]{5,})" https://$host/$1 permanent;
              {{- range .Values.nginx.additionalRewrites }}
              {{ . }}
              {{- end }}

              try_files $uri $uri/ /index.html;
          }
      }

      {{- if .Values.nginx.redirects.enabled }}
      # WARNING: Must remain at the bottom to ensure connections default to
      # the first server configuration for institutions
      {{- range $value := .Values.nginx.redirects.domains }}
      server {
          listen {{ $.Values.service.internalPort }};
          server_name {{ $value.from | join " " }};
          return 301 https://{{ $value.to }}$request_uri;
      }
      {{- end }}
      {{- end }}
  }
{{- end -}}
{{- range $key, $value := .Values.configEnvs }}
  {{ $key }}: {{ $value | quote }}
{{- end }}
{{- range $key, $value := merge .Values.configFiles (include "angular.inlineconfigs" . | fromYaml) ((.Files.Glob "files/*").AsConfig | fromYaml) }}
  {{ $key }}: |-
    {{- $value | nindent 4 }}
{{- end }}
