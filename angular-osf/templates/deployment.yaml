apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "angular.fullname" . }}
  labels:
    app: {{ template "angular.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ template "angular.name" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "angular.name" . }}
        release: {{ .Release.Name }}
      annotations:
        {{- include "angular.deploymentAnnotations" . | nindent 8 }}
    spec:
      affinity:
        {{- if .Values.additionalAffinities }}
        {{- toYaml .Values.additionalAffinities | nindent 8 }}
        {{- end }}
        {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ template "angular.name" . }}
                  release: {{ .Release.Name }}
        {{- else if eq .Values.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: {{ template "angular.name" . }}
                    release: {{ .Release.Name }}
        {{- end }}
      initContainers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |-
              set -e
              # TODO: Determine how to inject angular config
              # {{ if hasKey .Values.configFiles "config.json" -}}
              # node /code/replace-config.js
              # {{- end }}
              cp -Rf /code/dist/osf/browser/* /static/
              cp -Rf /code/robots.txt /static/robots.txt
          env:
            {{- include "angular.environment" . | indent 12 }}
          volumeMounts:
            - name: static
              mountPath: /static
            {{- if hasKey .Values.configFiles "config.json" }}
            - name: config
              mountPath: /code/replace-config.js
              subPath: replace-config.js
              readOnly: true
            - name: config
              mountPath: /code/config.json
              subPath: config.json
              readOnly: true
            - name: config
              mountPath: /code/robots.txt
              subPath: robots.txt
              readOnly: true
            {{- end }}
      containers:
        - name: {{ .Values.nginx.name }}
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          command:
            - nginx
            - -c
            - /etc/nginx/nginx.conf
            - -g
            - daemon off;
          env:
            {{- include "angular.environment" . | indent 12 }}
          volumeMounts:
            - mountPath: /static
              name: static
              readOnly: true
            - mountPath: /etc/nginx/nginx.conf
              name: config
              subPath: nginx.conf
              readOnly: true
            {{- if .Values.prerender.enabled }}
            - mountPath: /etc/nginx/prerender.conf
              name: config
              subPath: nginx-prerender.conf
              readOnly: true
            {{- end }}
            {{- if .Values.nginx.volumeMounts }}
            {{- toYaml .Values.nginx.volumeMounts | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          # livenessProbe:
          #   httpGet:
          #     path: /healthz
          #     port: {{ .Values.service.internalPort }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.internalPort }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      volumes:
        - name: static
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "angular.fullname" . }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
    {{- end }}
