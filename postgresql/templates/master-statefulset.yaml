apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "postgresql.master.fullname" . }}
  labels:
    app: {{ template "postgresql.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    component: "{{ .Values.master.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "postgresql.master.fullname" . }}
  replicas: 1
  {{- if .Values.master.updateStrategy }}
  updateStrategy:
    {{- toYaml .Values.master.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "postgresql.name" . }}
        component: "{{ .Values.master.name }}"
        release: {{ .Release.Name }}
      annotations:
        {{- include "postgresql.deploymentAnnotations" . | indent 8 }}
    spec:
      {{- if .Values.master.additionalAffinities }}
      affinity:
        {{- toYaml .Values.master.additionalAffinities | nindent 8 }}
      {{- end }}
      containers:
        - name: postgresql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: STATEFUL_TYPE
              value: master
            {{- include "postgresql.environment" . | indent 12 }}
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - su
                - postgres
                - -c
                - pg_isready
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - su
                - postgres
                - -c
                - pg_isready
            timeoutSeconds: 3
            periodSeconds: 5
          {{- if .Values.master.resources }}
          resources:
            {{- toYaml .Values.master.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- include "postgresql.volumeMounts" . | indent 12 }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: "{{ .Values.metrics.image }}:{{ .Values.metrics.imageTag }}"
          imagePullPolicy: {{ default "" .Values.metrics.imagePullPolicy | quote }}
          env:
            - name: DATA_SOURCE_NAME
              value: postgresql://postgres@127.0.0.1:5432?sslmode=disable
          ports:
            - name: metrics
              containerPort: 9187
          {{- if .Values.metrics.customMetrics }}
          args: ["-extend.query-path", "/conf/custom-metrics.yaml"]
          volumeMounts:
            - name: custom-metrics
              mountPath: /conf
              readOnly: true
          {{- end }}
          {{- if .Values.metrics.resources }}
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
          {{- end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.master.terminationGracePeriodSeconds }}
      volumes:
        {{- include "postgresql.volumes" . | indent 8 }}
        {{- if not .Values.master.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
  {{- if .Values.master.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - {{ .Values.master.persistence.accessMode | quote }}
      {{- if hasKey .Values.master.persistence "storageClass" }}
        storageClassName: {{ .Values.master.persistence.storageClass | quote }}
      {{- end }}
        resources:
          requests:
            storage: {{ .Values.master.persistence.size | quote }}
  {{- end }}
