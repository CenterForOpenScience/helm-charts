back-end: true
front-end: true

global:
  postgresDatabase: ''
  postgresUser: ''

secrets:
  SENSITIVE_DATA_SALT: ''
  SENSITIVE_DATA_SECRET: ''
  admin-local.py: |-
    # -*- coding: utf-8 -*-
    import os

    # TBD...
  api-local.py: |-
    # -*- coding: utf-8 -*-
    import os

    # TBD...
  web-local.py: |-
    # -*- coding: utf-8 -*-
    import os

    # TBD...
  addons-box-local.py: |-
    # -*- coding: utf-8 -*-
    BOX_KEY = ''
    BOX_SECRET = ''
  addons-dataverse-local.py: |-
    # -*- coding: utf-8 -*-
    HOST = ''
  addons-dropbox-local.py: |-
    # -*- coding: utf-8 -*-
    DROPBOX_KEY = ''
    DROPBOX_SECRET = ''
  addons-figshare-local.py: |-
    # -*- coding: utf-8 -*-
    CLIENT_ID = ''
    CLIENT_SECRET = ''
  addons-github-local.py: |-
    # -*- coding: utf-8 -*-
    CLIENT_ID = ''
    CLIENT_SECRET = ''
  addons-googledrive-local.py: |-
    # -*- coding: utf-8 -*-
    CLIENT_ID = ''
    CLIENT_SECRET = ''
  addons-mendeley-local.py: |-
    # -*- coding: utf-8 -*-
    MENDELEY_CLIENT_ID = ''
    MENDELEY_CLIENT_SECRET = ''
  addons-osfstorage-local.py: |-
    # -*- coding: utf-8 -*-
    WATERBUTLER_CREDENTIALS = {
        'storage': {
            'region': '',
            'username': '',
            'token': '',
            'temp_key': '',
        },
        'parity': {
            'region': '',
            'username': '',
            'token': '',
            'temp_key': '',
        },
        'archive': {
            'access_key': '',
            'secret_key': '',
        },
    }

    WATERBUTLER_SETTINGS = {
        'storage': {
            'provider': '',
            'container': '',
            'use_public': True,
        },
        'parity': {
            'provider': '',
            'container': '',
            'use_public': True,
        },
        'archive': {
            'vault': '',
        },
    }

    WATERBUTLER_RESOURCE = 'container'
  addons-wiki-local.py: |-
    # -*- coding: utf-8 -*-
    from datetime import datetime

    SHAREJS_URL = ''
    WIKI_CHANGE_DATE = datetime.utcfromtimestamp('')
  addons-zotero-local.py: |-
    # -*- coding: utf-8 -*-
    ZOTERO_CLIENT_ID = ''
    ZOTERO_CLIENT_SECRET = ''


ingress:
  domainPrefix: ''

elasticsearch:
  image:
    repository: "jetstack/elasticsearch-pet"
    tag: "2.4.0"
    pullPolicy: "Always"

  client:
    name: client
    replicas: 2
    serviceType: ClusterIP
    heapSize: "128m"
    resources: {}
      # limits:
      #   cpu: "1"
      #   memory: "512Mi"
      # requests:
      #   cpu: "25m"
      #   memory: "256Mi"

  master:
    name: master
    replicas: 2
    heapSize: "128m"
    resources: {}
      # limits:
      #   cpu: "1"
      #   memory: "512Mi"
      # requests:
      #   cpu: "25m"
      #   memory: "256Mi"

  data:
    name: data
    replicas: 3
    heapSize: "1536m"
    storage: "30Gi"
    # storageClass: "ssd"
    terminationGracePeriodSeconds: 3600
    resources: {}
      # limits:
      #   cpu: "1"
      #   memory: "512Mi"
      # requests:
      #   cpu: "25m"
      #   memory: "256Mi"

postgresql:
  # replicaCount: 1
  ## postgres image repository
  image: "postgres"
  ## postgres image version
  ## ref: https://hub.docker.com/r/library/postgres/tags/
  ##
  imageTag: "9.6"

  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  ## Create a database user
  ## Default: postgres
  postgresUser: postgres
  # Default: random 10 character string
  # postgresPassword:

  ## Create a database
  ## Default: the postgres user
  postgresDatabase: osf

  # Specify initdb arguments, e.g. --data-checksums
  # ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
  # ref: https://www.postgresql.org/docs/current/static/app-initdb.html
  postgresInitdbArgs: --data-checksums

  ## Persist data to a persitent volume
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass: ssd
    accessMode: ReadWriteOnce
    size: 25Gi
    subPath: "postgresql-db"

  metrics:
    enabled: false
    image: wrouesnel/postgres_exporter
    imageTag: v0.1.1
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: 256Mi
        cpu: 100m

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m

rabbitmq:
  ## Bitnami RabbitMQ image version
  ## ref: https://hub.docker.com/r/bitnami/rabbitmq/tags/
  ##
  image: rabbitmq:3-management

  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  ## RabbitMQ application username
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  rabbitmqUsername: user

  ## RabbitMQ application password
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  # rabbitmqPassword:

  ## Erlang cookie to determine whether different nodes are allowed to communicate with each other
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  # rabbitmqErlangCookie:

  ## Node port
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  rabbitmqNodePort: 5672

  ## Node Type
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  rabbitmqNodeType: stats

  ## Node Name
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  rabbitmqNodeName: rabbit@localhost

  ## Node name to cluster with. e.g.: `clusternode@hostname`
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  # rabbitmqClusternodename:

  ## RabbitMQ application vhost
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  rabbitmqVhost: /

  ## RabbitMQ Manager port
  ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
  ##
  rabbitmqManagerPort: 15672

  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass: ssd
    accessMode: ReadWriteOnce
    size: 10Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
