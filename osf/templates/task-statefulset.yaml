{{- if .Values.task.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "osf.task.fullname" . }}
  labels:
    app: {{ template "osf.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    component: "{{ .Values.task.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ template "osf.name" . }}
      component: "{{ .Values.task.name }}"
      release: {{ .Release.Name }}
  serviceName: {{ template "osf.task.fullname" . }}
  replicas: {{ .Values.task.replicaCount }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  template:
    metadata:
      labels:
        app: {{ template "osf.name" . }}
        component: "{{ .Values.task.name }}"
        release: {{ .Release.Name }}
      annotations:
        {{- include "osf.deploymentAnnotations" . | nindent 8 }}
    spec:
      affinity:
        {{- if .Values.task.additionalAffinities }}
        {{- toYaml .Values.task.additionalAffinities | nindent 8 }}
        {{- end }}
        {{- if eq .Values.task.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ template "osf.name" . }}
                  release: "{{ .Release.Name }}"
                  component: "{{ .Values.task.name }}"
        {{- else if eq .Values.task.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: {{ template "osf.name" . }}
                    release: "{{ .Release.Name }}"
                    component: "{{ .Values.task.name }}"
        {{- end }}
      initContainers:
        - name: chown
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - chown -R www-data:www-data /data /log
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /log
              name: log
        {{- include "osf.certificates.initContainer" . | nindent 8 }}
      containers:
        - name: {{ .Values.task.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |-
              POSTFIX=''
              {{- if .Values.task.reserve_worker }}
              [[ `hostname` =~ -([0-9]+)$ ]]
              ordinal=${BASH_REMATCH[1]}
              if [[ $ordinal -eq 0 ]]; then
                POSTFIX='--exclude-queues low,celery'
              fi
              {{- end}}
              su-exec www-data celery --app framework.celery_tasks worker \
                --concurrency "{{ .Values.task.concurrency }}" --loglevel "{{ .Values.task.logLevel }}" \
                --hostname $POD_NAME --without-gossip -Ofair
                {{- if .Values.task.maxTasksPerChild }} --maxtasksperchild "{{ .Values.task.maxTasksPerChild }}"{{- end }}
                {{- if .Values.task.queues }} --queues "{{ .Values.task.queues }}"{{- end}} $POSTFIX
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: api.base.settings
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- include "osf.environment" . | nindent 12 }}
            {{- range $key, $value := .Values.task.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /log
              name: log
            {{- include "osf.volumeMounts" . | nindent 12 }}
            {{- if .Values.task.volumeMounts }}
            {{- toYaml .Values.task.volumeMounts | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.task.resources | nindent 12 }}
      volumes:
        {{- include "osf.volumes" . | nindent 8 }}
        - name: data
          emptyDir: {}
        {{- if not .Values.task.persistence.enabled }}
        - name: log
          emptyDir: {}
        {{- end }}
      {{- if .Values.task.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.task.nodeSelector | nindent 8 }}
      {{- end }}
  {{- if .Values.task.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: log
      spec:
        accessModes:
          - {{ .Values.task.persistence.accessMode | quote }}
        {{- if .Values.task.persistence.storageClass }}
        storageClassName: {{ .Values.task.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.task.persistence.size | quote }}
  {{- end }}
{{- end -}}
