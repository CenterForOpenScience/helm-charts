{{- if .Values.task.enabled -}}
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "osf.task.fullname" . }}
  labels:
    app: {{ template "osf.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    component: "{{ .Values.task.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "osf.task.fullname" . }}
  replicas: {{ .Values.task.replicaCount }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  template:
    metadata:
      labels:
        app: {{ template "osf.name" . }}
        component: "{{ .Values.task.name }}"
        release: {{ .Release.Name }}
      annotations:
        {{- include "osf.deploymentAnnotations" . | indent 8 }}
        # Init containers not updated on upgrade : https://github.com/kubernetes/helm/issues/2702
        {{- if and (eq .Capabilities.KubeVersion.Major "1") (lt .Capabilities.KubeVersion.Minor "8") }}
        pod.beta.kubernetes.io/init-containers: |-
          {{- (include "osf.task.initContainers" . | fromYaml).initContainers | toJson | nindent 10 }}
        {{- end }}
    spec:
      {{- if or (gt .Capabilities.KubeVersion.Major "1") (and (eq .Capabilities.KubeVersion.Major "1") (ge .Capabilities.KubeVersion.Minor "8")) }}
      {{- include "osf.task.initContainers" . | nindent 6 }}
      {{- end }}
      containers:
        - name: {{ .Values.task.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |-
              PREFIX=''
              if [ -f /code/newrelic.ini ]; then
                PREFIX='newrelic-admin run-program'
              fi
              $PREFIX gosu www-data celery worker --app framework.celery_tasks \
                --concurrency "{{ .Values.task.concurrency }}" --loglevel "{{ .Values.task.logLevel }}" \
                --hostname $POD_NAME --without-gossip -Ofair
                {{- if .Values.task.maxTasksPerChild }} --maxtasksperchild "{{ .Values.task.maxTasksPerChild }}"{{- end }}
                {{- if .Values.task.queues }} --queues "{{ .Values.task.queues }}"{{- end }}
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: api.base.settings
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- include "osf.environment" . | nindent 12 }}
            {{- range $key, $value := .Values.task.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - mountPath: /log
              name: log-volume
            {{- include "osf.volumeMounts" . | nindent 12 }}
            {{- if .Values.task.volumeMounts }}
            {{- toYaml .Values.task.volumeMounts | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.task.resources | nindent 12 }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "osf.fullname" . }}
        - name: secret-volume
          secret:
            secretName: {{ template "osf.fullname" . }}
        {{- if not .Values.task.persistence.enabled }}
        - name: log-volume
          emptyDir: {}
        {{- end }}
      {{- if .Values.task.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.task.nodeSelector | nindent 8 }}
      {{- end }}
  {{- if .Values.task.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: log-volume
      spec:
        accessModes:
          - {{ .Values.task.persistence.accessMode | quote }}
        {{- if .Values.task.persistence.storageClass }}
        storageClassName: {{ .Values.task.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.task.persistence.size | quote }}
  {{- end }}
{{- end -}}
