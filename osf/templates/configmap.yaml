apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "osf.fullname" . }}
  labels:
    app: {{ template "osf.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
{{- define "osf.inlineconfigs" }}
{{- $osfPreprints := (index .Values "osf-preprints") }}
{{- $osfReviews := (index .Values "osf-reviews") }}
{{- $osfWeb := (index .Values "osf-web") }}
default.conf: ''
admin-nginx.conf: |-
  user nginx;
  worker_processes {{ .Values.admin.nginx.workerCount }};

  load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;
  {{- if .Values.admin.nginx.vts.enabled }}
  load_module /usr/lib/nginx/modules/ngx_http_geoip_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_vhost_traffic_status_module.so;
  {{- end }}
  {{- range .Values.admin.nginx.modules }}
  load_module {{ . }};
  {{- end }}

  error_log /var/log/nginx/error.log warn;
  pid /var/run/nginx.pid;

  events {
      worker_connections 1024;
  }

  http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format main '$remote_addr - $upstream_cache_status $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
      access_log /var/log/nginx/access.log main;

      real_ip_header {{ .Values.admin.nginx.realIpHeader }};
      real_ip_recursive {{ .Values.admin.nginx.realIpRecursive }};
      {{- range .Values.admin.nginx.proxySourceRanges }}
      set_real_ip_from {{ . }};
      {{- end }}

      {{- if .Values.admin.nginx.vts.enabled }}
      geoip_country       /etc/nginx/GeoIP.dat;
      geoip_city          /etc/nginx/GeoLiteCity.dat;
      geoip_proxy_recursive on;
      {{- range .Values.admin.nginx.proxySourceRanges }}
      geoip_proxy {{ . }};
      {{- end }}

      vhost_traffic_status_zone shared:vhost_traffic_status:{{ .Values.admin.nginx.vts.statusZoneSize }};
      vhost_traffic_status_filter_by_set_key {{ .Values.admin.nginx.vts.defaultFilterKey }};
      {{- end }}

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 620s;
      keepalive_requests 10000;
      types_hash_max_size 2048;
      server_tokens off;

      gzip on;
      gzip_disable "MSIE [1-6]\.(?!.*SV1)";
      gzip_comp_level 2;
      gzip_min_length 512;
      gzip_proxied any;
      gzip_vary on;
      gzip_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      brotli on;
      brotli_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      {{- if .Values.admin.nginx.vts.enabled }}
      server {
          listen {{ .Values.admin.nginx.vts.internalPort }};
          server_name _;

          location /healthz {
              access_log off;
              return 200;
          }

          location /nginx_status {
              vhost_traffic_status_display;
              vhost_traffic_status_display_format html;
          }
      }
      {{- end }}

      server {
          listen {{ .Values.admin.service.internalPort }};
          server_name _;

          client_max_body_size 25M;
          keepalive_timeout 620s;

          root /static/code;

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /healthz {
              access_log off;
              return 200;
          }

          location = /robots.txt {
              alias /usr/share/nginx/html/robots.txt;
          }

          location = /favicon.ico {
              alias /static/code/website/static/favicon.ico;
          }

          location ~* ^/static/(.*) {
              alias /static/code/admin/$1;
          }

          include /etc/nginx/conf.d/*.conf;

          location / {
              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
              add_header Pragma "no-cache";

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              # Pass requests to uwsgi application
              include /etc/nginx/uwsgi_params;
              # WARNING: Turning off uwsgi buffering will disable nginx caching.
              # uwsgi_buffering off;
              uwsgi_pass uwsgi://127.0.0.1:{{ .Values.admin.service.externalPort }};
          }
      }
  }
admin-uwsgi.ini: |-
  [uwsgi]
  uid = www-data
  gid = www-data

  # add user-agent, http://uwsgi.unbit.narkive.com/jEtphIzE/default-log-format-explained#post5
  log-format = [pid: %(pid)|app: ?|req: ?/?] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core)) "%(uagent)"

  # Flask-related settings
  chdir = /code
  module = admin.base.wsgi:application
  env = OSF_PRODUCTION=1
  env = DJANGO_SETTINGS_MODULE=admin.base.settings
  env = DEBUG=

  # process-related settings
  master = true
  workers = {{ .Values.admin.uwsgi.workerCount }}
  threads = 1
  harakiri = 120
  buffer-size = 8192
  stats = :1717
  vacuum = true
  need-app = true
  show-config = true

  # greenlet settings
  gevent = 500
  gevent-early-monkey-patch = true
api-nginx.conf: |-
  user nginx;
  worker_processes 1;

  load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;
  {{- if .Values.api.nginx.vts.enabled }}
  load_module /usr/lib/nginx/modules/ngx_http_geoip_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_vhost_traffic_status_module.so;
  {{- end }}
  {{- range .Values.api.nginx.modules }}
  load_module {{ . }};
  {{- end }}

  error_log /var/log/nginx/error.log warn;
  pid /var/run/nginx.pid;

  events {
      worker_connections 1024;
  }

  http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format main '$remote_addr - $upstream_cache_status $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
      access_log /var/log/nginx/access.log main;

      real_ip_header {{ .Values.api.nginx.realIpHeader }};
      real_ip_recursive {{ .Values.api.nginx.realIpRecursive }};
      {{- range .Values.api.nginx.proxySourceRanges }}
      set_real_ip_from {{ . }};
      {{- end }}

      {{- if .Values.api.nginx.vts.enabled }}
      geoip_country       /etc/nginx/GeoIP.dat;
      geoip_city          /etc/nginx/GeoLiteCity.dat;
      geoip_proxy_recursive on;
      {{- range .Values.api.nginx.proxySourceRanges }}
      geoip_proxy {{ . }};
      {{- end }}

      vhost_traffic_status_zone shared:vhost_traffic_status:{{ .Values.api.nginx.vts.statusZoneSize }};
      vhost_traffic_status_filter_by_set_key {{ .Values.api.nginx.vts.defaultFilterKey }};
      {{- end }}

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 620s;
      keepalive_requests 10000;
      types_hash_max_size 2048;
      server_tokens off;

      gzip on;
      gzip_disable "MSIE [1-6]\.(?!.*SV1)";
      gzip_comp_level 2;
      gzip_min_length 512;
      gzip_proxied any;
      gzip_vary on;
      gzip_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      brotli on;
      brotli_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      {{- if .Values.api.nginx.vts.enabled }}
      server {
          listen {{ .Values.api.nginx.vts.internalPort }};
          server_name _;

          location /healthz {
              access_log off;
              return 200;
          }

          location /nginx_status {
              vhost_traffic_status_display;
              vhost_traffic_status_display_format html;
          }
      }
      {{- end }}

      server {
          listen {{ .Values.api.service.internalPort }};
          server_name _;

          client_max_body_size 25M;
          keepalive_timeout 620s;

          root /static/code;

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /healthz {
              access_log off;
              return 200;
          }

          location = /robots.txt {
              alias /usr/share/nginx/html/robots.txt;
          }

          location = /favicon.ico {
              alias /static/code/website/static/favicon.ico;
          }

          location ~* ^/v2/static/(.*) {
              alias /static/code/api/static/vendor/$1;
          }

          include /etc/nginx/conf.d/*.conf;

          location / {
              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
              add_header Pragma "no-cache";

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              # Pass requests to uwsgi application
              include /etc/nginx/uwsgi_params;
              # WARNING: Turning off uwsgi buffering will disable nginx caching.
              # uwsgi_buffering off;
              uwsgi_pass uwsgi://127.0.0.1:{{ .Values.api.service.externalPort }};
          }
      }
  }
api-uwsgi.ini: |-
  [uwsgi]
  uid = www-data
  gid = www-data

  # add user-agent, http://uwsgi.unbit.narkive.com/jEtphIzE/default-log-format-explained#post5
  log-format = [pid: %(pid)|app: ?|req: ?/?] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core)) "%(uagent)"

  # Flask-related settings
  chdir = /code
  module = api.base.wsgi:application
  env = OSF_PRODUCTION=1
  env = DJANGO_SETTINGS_MODULE=api.base.settings
  env = DEBUG=

  # process-related settings
  master = true
  workers = {{ .Values.api.uwsgi.workerCount }}
  threads = 1
  harakiri = 120
  buffer-size = 8192
  stats = :1717
  vacuum = true
  need-app = true
  show-config = true

  # greenlet settings
  gevent = 500
  gevent-early-monkey-patch = true
web-nginx-osf-preprints.conf: |-
  {{- range $key, $val := .Values.web.nginx.preprintDomainRedirects }}
  location ~* ^/preprints/{{ $key }}(?!/\w+/download/?$)(.*) {
      return 301 https://{{ $val }}$1;
  }
  {{- end }}

  location ~* ^/preprints/(?!(\w+/download|\w+/\w+/download)/?$).* {
      {{- if .Values.prerender.enabled }}
      include /etc/nginx/prerender.conf;
      {{- end }}

      rewrite ^/preprints/(.*)$ /$1 break;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://{{ $osfPreprints.service.name }}:{{ $osfPreprints.service.externalPort }};
  }
web-nginx-osf-reviews.conf: |-
  location ~* ^/reviews(/?$|/.*) {
      {{- if .Values.prerender.enabled }}
      include /etc/nginx/prerender.conf;
      {{- end }}

      rewrite ^/reviews/(.*)$ /$1 break;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://{{ $osfReviews.service.name }}:{{ $osfReviews.service.externalPort }};
  }
web-nginx-osf-web.conf: |-
  location ~* ^/ember_osf_web(/?$|/.*) {
      {{- if .Values.prerender.enabled }}
      include /etc/nginx/prerender.conf;
      {{- end }}

      rewrite ^/ember_osf_web/(.*)$ /$1 break;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://{{ $osfWeb.service.name }}:{{ $osfWeb.service.externalPort }};
  }
web-nginx-prerender.conf: |-
  set $prerender 0;

  if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|googlebot") {
      set $prerender 1;
  }

  # Google translate
  if ($http_referer ~* "translate\.googleusercontent\.com") {
      set $prerender 1;
  }

  if ($args ~* "_escaped_fragment_") {
      set $prerender 1;
  }

  if ($http_user_agent ~* "prerender") {
      set $prerender 0;
  }

  if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
      set $prerender 0;
  }

  # Exclude download links from prerender
  if ($arg_action ~* "download") {
      set $prerender 0;
  }

  if ($uri ~* ^/\w+/download(/?$|/.*)) {
      set $prerender 0;
  }

  if ($uri ~* ^/preprints/(\w+/download|\w+/\w+/download)(/?$|/.*)) {
      set $prerender 0;
  }

  if ($prerender = 1) {
      rewrite .* /https://$host$request_uri? break;
      proxy_pass http://{{ .Values.prerender.service.name }}:{{ .Values.prerender.service.externalPort }};
  }
web-nginx-redis.conf: |-
  # Must use redis module vs redis2 because of bug in response body
  # https://github.com/openresty/srcache-nginx-module/issues/41
  location = /redis_get {
      internal;

      set_unescape_uri $redis_key $arg_key;
      set_md5 $redis_key;

      redis_pass {{ template "osf.redis.fullname" . }}:{{ .Values.redis.service.port }};
  }

  location = /redis2_set {
      internal;

      set_unescape_uri $exptime $arg_exptime;
      set_unescape_uri $key $arg_key;
      set_md5 $key;

      redis2_query set $key $echo_request_body;
      redis2_query expire $key $exptime;
      redis2_pass {{ template "osf.redis.fullname" . }}:{{ .Values.redis.service.port }};
  }
web-nginx-redis-cache.conf: |-
  # NOTE: $not_cacheable is set via map in order to be available at the correct phase for srcache skip
  # https://github.com/openresty/srcache-nginx-module#caveats

  # Caching configuration
  set $key "$host$uri$args_first$args_rest";
  set_escape_uri $escaped_key $key;
  # Default cache methods, specified for clarity.
  srcache_methods GET HEAD;
    # Skip cache when:
  # - logged in
  # - using basic auth
  # - view-only link
  # - hmac signed
  # - waterbutler provider
  # - monitoring agent

  srcache_fetch_skip $not_cacheable;
  srcache_store_skip $not_cacheable;

  srcache_fetch GET /redis_get key=$escaped_key;
  srcache_store PUT /redis2_set key=$escaped_key&exptime=$exp_time;

  # Custom Cache Header
  add_header X-Cache-Status $srcache_fetch_status;
web-nginx-uwsgi-cache.conf: |-
  set $agent_monitor 0;
  if ($http_user_agent ~* "(haproxy monitoring|rackspace monitoring|varnish|runscope-radar)") {
      set $agent_monitor 1;
  }

  # Custom Cache Header
  add_header X-Cache-Status $upstream_cache_status;

  # Caching configuration
  uwsgi_cache osf_uwsgi_cache;
  uwsgi_cache_key $host$uri$args_first$args_rest;
  # Default cache methods, specified for clarity.
  uwsgi_cache_methods GET HEAD;
  # Skip cache when:
  # - logged in
  # - using basic auth
  # - view-only link
  # - hmac signed
  # - waterbutler provider
  # - monitoring agent
  uwsgi_cache_bypass $cookie_{{ .Values.web.nginx.cache.cookieName }} $http_authorization $arg_view_only $arg_signature $arg_provider $arg_render $agent_monitor;
  uwsgi_no_cache $cookie_{{ .Values.web.nginx.cache.cookieName }} $http_authorization $arg_view_only $arg_signature $arg_provider $arg_render $agent_monitor;
  uwsgi_cache_lock on;
  uwsgi_cache_lock_timeout 30s;
  uwsgi_cache_use_stale updating;
web-nginx.conf: |-
  user nginx;
  worker_processes 1;

  load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;
  {{- if .Values.web.nginx.vts.enabled }}
  load_module /usr/lib/nginx/modules/ngx_http_geoip_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_vhost_traffic_status_module.so;
  {{- end }}
  {{- if and .Values.web.nginx.cache.enabled .Values.redis.enabled }}
  load_module /usr/lib/nginx/modules/ndk_http_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_echo_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_redis_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_redis2_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_set_misc_module.so;
  load_module /usr/lib/nginx/modules/ngx_http_srcache_filter_module.so;
  {{- end }}
  {{- range .Values.web.nginx.modules }}
  load_module {{ . }};
  {{- end }}

  error_log /var/log/nginx/error.log warn;
  pid /var/run/nginx.pid;

  events {
      worker_connections 1024;
  }

  http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format main '$remote_addr - {{ if and .Values.web.nginx.cache.enabled .Values.redis.enabled }}$srcache_fetch_status{{ else }}$upstream_cache_status{{ end }} $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
      access_log /var/log/nginx/access.log main;

      real_ip_header {{ .Values.web.nginx.realIpHeader }};
      real_ip_recursive {{ .Values.web.nginx.realIpRecursive }};
      {{- range .Values.web.nginx.proxySourceRanges }}
      set_real_ip_from {{ . }};
      {{- end }}

      {{- if .Values.web.nginx.vts.enabled }}
      geoip_country       /etc/nginx/GeoIP.dat;
      geoip_city          /etc/nginx/GeoLiteCity.dat;
      geoip_proxy_recursive on;
      {{- range .Values.web.nginx.proxySourceRanges }}
      geoip_proxy {{ . }};
      {{- end }}

      vhost_traffic_status_zone shared:vhost_traffic_status:{{ .Values.web.nginx.vts.statusZoneSize }};
      vhost_traffic_status_filter_by_set_key {{ .Values.web.nginx.vts.defaultFilterKey }};
      {{- end }}

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 620s;
      types_hash_max_size 2048;
      server_tokens off;

      gzip on;
      gzip_disable "MSIE [1-6]\.(?!.*SV1)";
      gzip_comp_level 2;
      gzip_min_length 512;
      gzip_proxied any;
      gzip_vary on;
      gzip_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      brotli on;
      brotli_types text/plain text/css image/svg+xml application/javascript application/x-javascript text/xml application/xml text/javascript application/json application/xml+rss application/vnd.api+json;

      {{- if .Values.web.nginx.vts.enabled }}
      server {
          listen {{ .Values.web.nginx.vts.internalPort }};
          server_name _;

          location /healthz {
              access_log off;
              return 200;
          }

          location /nginx_status {
              vhost_traffic_status_display;
              vhost_traffic_status_display_format html;
          }
      }
      {{- end }}

      {{- if .Values.web.nginx.cache.enabled }}
      ##
      # Caching Settings
      ##

      # Pull cache-busting key out of query string
      map $args $args_first {
          default $args;
          ~^(?<first>.*?)&?_=\d+ $first;
      }
      map $args $args_rest {
          default "";
          ~^\?_=\d+&?(?<rest>.*)$ $rest;
          ~_=\d+(?<rest>.*)$ $rest;
      }

      map "$http_user_agent" $agent_not_cacheable {
          default "";
          "~*(haproxy monitoring|rackspace monitoring|varnish|prerender)" "1";
      }
      map "$cookie_{{ .Values.web.nginx.cache.cookieName }}$http_authorization$arg_view_only$arg_signature$arg_provider$arg_render$agent_not_cacheable" $not_cacheable {
          default 1;
          "" 0;
      }

      {{- if not .Values.redis.enabled }}
      uwsgi_cache_path /cache/uwsgi keys_zone=osf_uwsgi_cache:10m inactive=120m;
      uwsgi_temp_path /cache/uwsgi-temp;
      {{- end }}
      {{- end }}

      {{- if .Values.web.nginx.preprintDomains }}
      server {
          listen {{ .Values.web.service.internalPort }};
          server_name {{ join " " .Values.web.nginx.preprintDomains }};

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /favicon.ico {
              alias /static/code/website/static/favicon.ico;
          }

          location = /robots.txt {
              alias /usr/share/nginx/html/robots.txt;
          }

          location ~* ^/(?!\w+/download/?$).* {
              {{- if .Values.prerender.enabled }}
              include /etc/nginx/prerender.conf;
              {{- end }}

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              proxy_redirect off;
              proxy_buffering off;
              proxy_pass http://{{ $osfPreprints.service.name }}:{{ $osfPreprints.service.externalPort }};
          }

          location / {
              # Google Scholar wants 302 instead of 301
              return 302 https://{{ .Values.web.nginx.primaryDomain }}$request_uri;
          }
      }
      {{- end }}

      {{- if .Values.web.nginx.institutionDomains }}
      server {
          listen {{ .Values.web.service.internalPort }};
          server_name {{ join " " .Values.web.nginx.institutionDomains }};

          client_max_body_size 25M;
          keepalive_timeout 620s;

          root /static/code;

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /favicon.ico {
              alias /static/code/website/static/favicon.ico;
          }

          location = /robots.txt {
              alias /usr/share/nginx/html/robots.txt;
          }

          location ~* ^/static/addons/(.*?)/(.*) {
              alias /static/code/addons/$1/static/$2;
          }

          location ~* ^/static/(.*) {
              alias /static/code/website/static/$1;
          }

          location = / {
              {{- if .Values.prerender.enabled }}
              include /etc/nginx/prerender.conf;
              {{- end }}

              {{- if .Values.web.nginx.cache.enabled }}
              {{- if .Values.redis.enabled }}
              set $exp_time 60; # Redis time in seconds
              include /etc/nginx/redis-cache.conf;
              {{- else }}
              uwsgi_cache_valid 200 1m;
              include /etc/nginx/uwsgi-cache.conf;
              {{- end }}
              {{- end }}

              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
              add_header Pragma "no-cache";

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              # Pass requests to uwsgi application
              include /etc/nginx/uwsgi_params;
              # WARNING: Turning off uwsgi buffering will disable nginx caching.
              # uwsgi_buffering off;
              uwsgi_pass uwsgi://127.0.0.1:{{ .Values.web.service.externalPort }};
          }

          location / {
              return 301 https://{{ .Values.web.nginx.primaryDomain }}$request_uri;
          }
      }
      {{- end }}

      server {
          listen {{ .Values.web.service.internalPort }} default_server;
          server_name _;

          client_max_body_size 25M;
          keepalive_timeout 620s;

          root /static/code;

          if ($http_x_forwarded_proto = "http") {
              return 301 https://$host$request_uri;
          }

          location = /healthz {
              access_log off;
              return 200;
          }

          location = /robots.txt {
              alias /usr/share/nginx/html/robots.txt;
          }

          location = /favicon.ico {
              alias /static/code/website/static/favicon.ico;
          }

          location ~* ^/static/addons/(.*?)/(.*) {
              alias /static/code/addons/$1/static/$2;
          }

          location ~* ^/static/(.*) {
              alias /static/code/website/static/$1;
          }

          {{- if (index .Values.web.nginx "additionalConfig") }}
          {{- .Values.web.nginx.additionalConfig | nindent 10 }}
          {{- end }}

          include /etc/nginx/conf.d/*.conf;

          location ~* ^/share(/?$|/.*) {
              return 301 {{ .Values.share.url }};
          }

          {{- if and .Values.web.nginx.cache.enabled .Values.web.nginx.cache.guids }}
          location ~* (^/|^/api/v1/project/)({{ join "|" .Values.web.nginx.cache.guids }}) {
              {{- if .Values.prerender.enabled }}
              include /etc/nginx/prerender.conf;
              {{- end }}

              {{- if .Values.web.nginx.cache.enabled }}
              {{- if .Values.redis.enabled }}
              set $exp_time 3600; # Redis time in seconds
              include /etc/nginx/redis-cache.conf;
              {{- else }}
              uwsgi_cache_valid 200 60m;
              include /etc/nginx/uwsgi-cache.conf;
              {{- end }}
              {{- end }}

              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
              add_header Pragma "no-cache";

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              # Pass requests to uwsgi application
              include /etc/nginx/uwsgi_params;
              # WARNING: Turning off uwsgi buffering will disable nginx caching.
              # uwsgi_buffering off;
              uwsgi_pass uwsgi://127.0.0.1:{{ .Values.web.service.externalPort }};
          }
          {{- end }}

          location / {
              {{- if .Values.prerender.enabled }}
              include /etc/nginx/prerender.conf;
              {{- end }}

              {{- if .Values.web.nginx.cache.enabled }}
              {{- if .Values.redis.enabled }}
              set $exp_time 60; # Redis time in seconds
              include /etc/nginx/redis-cache.conf;
              {{- else }}
              uwsgi_cache_valid 200 1m;
              include /etc/nginx/uwsgi-cache.conf;
              {{- end }}
              {{- end }}

              # Disable caching of application requests
              add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate";
              add_header Expires "Mon, 01 Jan 1990 00:00:00 GMT";
              add_header Pragma "no-cache";

              # Mitigate HTTPoxy Vulnerability
              # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
              proxy_set_header Proxy                  "";

              # Pass requests to uwsgi application
              include /etc/nginx/uwsgi_params;
              
              # Timeout for waiting on the response body
              uwsgi_read_timeout {{ .Values.web.nginx.readTimeout }}s;

              # WARNING: Turning off uwsgi buffering will disable nginx caching.
              # uwsgi_buffering off;
              uwsgi_pass uwsgi://127.0.0.1:{{ .Values.web.service.externalPort }};

              # URL rewrites
              rewrite "^/project/.*?/node/(.*)" https://$host/$1 permanent;
              rewrite "^/project/([a-zA-Z0-9]{5,}.*)" https://$host/$1 permanent;
              rewrite "^/profile/([a-zA-Z0-9]{5,})" https://$host/$1 permanent;
              {{- range .Values.web.nginx.additionalRewrites }}
              {{ . }}
              {{- end }}
          }
      }

      {{- if .Values.web.nginx.redirects.enabled }}
      # WARNING: Must remain at the bottom to ensure connections default to
      # the first server configuration for institutions
      {{- range $value := .Values.web.nginx.redirects.domains }}
      server {
          listen {{ $.Values.web.service.internalPort }};
          server_name {{ $value.from | join " " }};
          return 301 https://{{ $value.to }}$request_uri;
      }
      {{- end }}
      {{- end }}
  }
web-uwsgi.ini: |-
  [uwsgi]
  uid = www-data
  gid = www-data

  # add user-agent, http://uwsgi.unbit.narkive.com/jEtphIzE/default-log-format-explained#post5
  log-format = [pid: %(pid)|app: ?|req: ?/?] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core)) "%(uagent)"

  # Flask-related settings
  chdir = /code
  module = main:app
  env = OSF_PRODUCTION=1
  env = DJANGO_SETTINGS_MODULE=api.base.settings
  env = DEBUG=

  # process-related settings
  master = true
  workers = {{ .Values.web.uwsgi.workerCount }}
  threads = 1
  harakiri = 120
  buffer-size = 8192
  stats = :1717
  vacuum = true
  need-app = true
  show-config = true

  # greenlet settings
  gevent = 500
  gevent-early-monkey-patch = true
{{- end -}}
  {{- range $key, $value := .Values.configEnvs }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- range $key, $value := merge .Values.configFiles (include "osf.inlineconfigs" . | fromYaml) ((.Files.Glob "files/*").AsConfig | fromYaml) }}
  {{ $key }}: |-
    {{- $value | nindent 4 }}
  {{- end }}
