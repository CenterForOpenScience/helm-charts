apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "sentry.fullname" . }}
  labels:
    {{- include "sentry.labels.standard" . | nindent 4 }}
    component: {{ template "sentry.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "sentry.name" . }}
      release: {{ .Release.Name }}
      component: {{ template "sentry.fullname" . }}
  replicas: {{ .Values.web.replicaCount }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  serviceName: {{ template "sentry.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "sentry.name" . }}
        release: {{ .Release.Name }}
        role: web
      annotations:
        {{- include "sentry.workloadAnnotations" . | nindent 8 }}
    spec:
      affinity:
        {{- if .Values.web.additionalAffinities }}
        {{- toYaml .Values.web.additionalAffinities | nindent 8 }}
        {{- end }}
        {{- if eq .Values.web.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ template "sentry.name" . }}
                  release: {{ .Release.Name }}
                  role: web
        {{- else if eq .Values.web.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: {{ template "sentry.name" . }}
                    release: {{ .Release.Name }}
                    role: web
        {{- end }}
      containers:
        - name: sentry
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: web
              containerPort: {{ .Values.service.externalPort }}
          env:
            {{- include "sentry.environment" . | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.persistence.mountPath }}
              name: data
          livenessProbe:
            failureThreshold: 5
            {{- if .Values.nginx.uwsgi }}
            tcpSocket:
              port: {{ .Values.service.externalPort }}
            {{- else }}
            httpGet:
              path: /_health/
              port: {{ .Values.service.externalPort }}
            {{- end }}
            initialDelaySeconds: 50
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 10
            {{- if .Values.nginx.uwsgi }}
            tcpSocket:
              port: {{ .Values.service.externalPort }}
            {{- else }}
            httpGet:
              path: /_health/
              port: {{ .Values.service.externalPort }}
            {{- end }}
            initialDelaySeconds: 50
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{- toYaml .Values.web.resources | nindent 12 }}
        - name: nginx
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          command:
            - nginx
            - -c
            - /etc/nginx/nginx.conf
            - -g
            - daemon off;
          ports:
            - name: http
              containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 10
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: config
              subPath: nginx.conf
              readOnly: true
            - mountPath: /etc/nginx/client-nginx.conf
              name: config
              subPath: client-nginx.conf
              readOnly: true
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ template "sentry.fullname" . }}
        - name: secret
          secret:
            secretName: {{ template "sentry.fullname" . }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        {{- if hasKey .Values.persistence "storageClass" }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
